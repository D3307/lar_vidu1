<?php

namespace App\Exports;

use App\Models\Order;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Concerns\FromArray;

namespace App\Exports;

use App\Models\Order;
use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Concerns\FromArray;

class ReportExcel implements FromArray
{
    public function array(): array
    {
        $rows = [];

        // ================= S·ªê LI·ªÜU T·ªîNG QUAN =================
        $totalOrders    = Order::count();
        $totalCustomers = Order::distinct('user_id')->count('user_id');

        $rows[] = ['üìå S·ªë li·ªáu t·ªïng quan'];
        $rows[] = ['Ch·ªâ s·ªë', 'Gi√° tr·ªã'];
        $rows[] = ['T·ªïng s·ªë ƒë∆°n h√†ng', $totalOrders];
        $rows[] = ['T·ªïng s·ªë kh√°ch h√†ng', $totalCustomers];
        $rows[] = []; // d√≤ng tr·ªëng


        // ================= DOANH THU THEO NG√ÄY =================
        $startDate = now()->subDays(6)->startOfDay();
        $endDate   = now()->endOfDay();

        $days = [];
        $current = $startDate->copy();
        while ($current <= $endDate) {
            $days[$current->format('Y-m-d')] = 0;
            $current->addDay();
        }

        $revenueByDate = Order::select(
                DB::raw('DATE_FORMAT(created_at, "%Y-%m-%d") as date'),
                DB::raw('SUM(total) as total_revenue')
            )
            ->whereBetween('created_at', [$startDate, $endDate])
            ->groupBy('date')
            ->pluck('total_revenue', 'date')
            ->toArray();

        foreach ($revenueByDate as $date => $revenue) {
            $days[$date] = $revenue;
        }

        $rows[] = ['üìÖ Doanh thu theo ng√†y (7 ng√†y g·∫ßn nh·∫•t)'];
        $rows[] = ['Ng√†y', 'Doanh thu'];
        foreach ($days as $date => $revenue) {
            $rows[] = [$date, $revenue];
        }
        $rows[] = [];


        // ================= DOANH THU THEO TH√ÅNG =================
        $months = [];
        for ($i = 1; $i <= 12; $i++) {
            $months[$i] = 0;
        }

        $revenueByMonth = Order::select(
                DB::raw('MONTH(created_at) as month'),
                DB::raw('SUM(total) as total_revenue')
            )
            ->whereYear('created_at', now()->year)
            ->groupBy('month')
            ->pluck('total_revenue', 'month')
            ->toArray();

        foreach ($revenueByMonth as $m => $revenue) {
            $months[(int)$m] = $revenue;
        }

        $rows[] = ['üìÜ Doanh thu theo th√°ng ('.now()->year.')'];
        $rows[] = ['Th√°ng', 'Doanh thu'];
        foreach ($months as $month => $revenue) {
            $rows[] = ['Th√°ng '.$month, $revenue];
        }
        $rows[] = [];


        // ================= DOANH THU THEO NƒÇM =================
        $firstYear = Order::select(DB::raw('MIN(YEAR(created_at)) as year'))->value('year') ?? now()->year;
        $lastYear  = now()->year;
        $years = [];
        for ($y = $firstYear; $y <= $lastYear; $y++) {
            $years[$y] = 0;
        }

        $revenueByYear = Order::select(
                DB::raw('YEAR(created_at) as year'),
                DB::raw('SUM(total) as total_revenue')
            )
            ->groupBy('year')
            ->pluck('total_revenue', 'year')
            ->toArray();

        foreach ($revenueByYear as $y => $revenue) {
            $years[(int)$y] = $revenue;
        }

        $rows[] = ['üìä Doanh thu theo nƒÉm'];
        $rows[] = ['NƒÉm', 'Doanh thu'];
        foreach ($years as $year => $revenue) {
            $rows[] = [$year, $revenue];
        }
        $rows[] = [];


        // ================= DOANH THU THEO DANH M·ª§C =================
        $revenueByCategory = DB::table('orders')
            ->join('order_items', 'orders.id', '=', 'order_items.order_id')
            ->join('products', 'order_items.product_id', '=', 'products.id')
            ->join('categories', 'products.category_id', '=', 'categories.id')
            ->select(
                'categories.name as category_name',
                DB::raw('SUM(order_items.price * order_items.quantity) as total_revenue')
            )
            ->groupBy('categories.name')
            ->get();

        $rows[] = ['üìÇ Doanh thu theo danh m·ª•c'];
        $rows[] = ['Danh m·ª•c', 'Doanh thu'];
        foreach ($revenueByCategory as $cat) {
            $rows[] = [$cat->category_name, $cat->total_revenue];
        }

        return $rows;
    }
}